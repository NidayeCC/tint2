diff --git a/libraries/node/deps/v8/build/toolchain.gypi b/libraries/node/deps/v8/build/toolchain.gypi
index 1d47360..77f13cf 100644
--- a/libraries/node/deps/v8/build/toolchain.gypi
+++ b/libraries/node/deps/v8/build/toolchain.gypi
@@ -659,7 +659,7 @@
               }],
               ['v8_target_arch=="x64"', {
                 # TODO(2207): remove this option once the bug is fixed.
-                'WholeProgramOptimization': 'true',
+                # 'WholeProgramOptimization': 'true',
               }],
             ],
           },
@@ -832,7 +832,7 @@
                   }],
                   ['v8_target_arch=="x64"', {
                     # TODO(2207): remove this option once the bug is fixed.
-                    'WholeProgramOptimization': 'true',
+                    # 'WholeProgramOptimization': 'true',
                   }],
                 ],
               },
diff --git a/libraries/node/deps/v8/tools/js2c.py b/libraries/node/deps/v8/tools/js2c.py
index b5436f9..10005db 100755
--- a/libraries/node/deps/v8/tools/js2c.py
+++ b/libraries/node/deps/v8/tools/js2c.py
@@ -499,7 +499,7 @@ def BuildMetadata(sources, source_bytes, native_type):
     "get_index_cases": "".join(get_index_cases),
     "get_script_source_cases": "".join(get_script_source_cases),
     "get_script_name_cases": "".join(get_script_name_cases),
-    "type": native_type,
+    "type": native_type.replace('..\..\..\..\..\..\..\..\libraries\\node\\deps\\v8\\tools\\gyp\\','')
   }
   return metadata
 
@@ -589,6 +589,7 @@ def main():
         type: type parameter for NativesCollection template.
         sources.js: JS internal sources or macros.py.""")
   (options, args) = parser.parse_args()
+
   JS2C(args[2:],
        args[0],
        args[1],
@@ -596,6 +597,5 @@ def main():
        options.startup_blob,
        options.js)
 
-
 if __name__ == "__main__":
   main()

diff --git a/libraries/node/src/node.js b/libraries/node/src/node.js
index 5046038..d401978 100644
--- a/libraries/node/src/node.js
+++ b/libraries/node/src/node.js
@@ -482,8 +482,14 @@
         break;
 
       default:
-        // Probably an error on in uv_guess_handle()
-        throw new Error('Implement me. Unknown stream file type!');
+        if(process.platform === 'win32' && (fd === 1 || fd === 2)) {
+          var fs = NativeModule.require('fs');
+          stream = new fs.SyncWriteStream(fd);
+          stream._type = 'fs'
+        } else {
+          // Probably an error on in uv_guess_handle()
+          throw new Error('Implement me. Unknown stdin file type!');
+        }
     }
 
     // For supporting legacy API we put the FD here.
@@ -554,8 +560,13 @@
           break;
 
         default:
-          // Probably an error on in uv_guess_handle()
-          throw new Error('Implement me. Unknown stdin file type!');
+          if(process.platform === 'win32' && (fd === 0)) {
+            var fs = NativeModule.require('fs');
+            stdin = new fs.ReadStream(null, { fd: fd });
+          } else {
+            // Probably an error on in uv_guess_handle()
+            throw new Error('Implement me. Unknown stdin file type!');
+          }
       }
 
       // For supporting legacy API we put the FD here.
@@ -564,7 +575,7 @@
       // stdin starts out life in a paused state, but node doesn't
       // know yet.  Explicitly to readStop() it to put it in the
       // not-reading state.
-      if (stdin._handle && stdin._handle.readStop) {
+      if (stdin._handle && stdin._handle.readStop && process.platform != 'win32') {
         stdin._handle.reading = false;
         stdin._readableState.reading = false;
         stdin._handle.readStop();
