diff --git a/deps/v8/tools/js2c.py b/deps/v8/tools/js2c.py
index c280537..746af0f 100755
--- a/deps/v8/tools/js2c.py
+++ b/deps/v8/tools/js2c.py
@@ -589,6 +589,9 @@ def main():
         type: type parameter for NativesCollection template.
         sources.js: JS internal sources or macros.py.""")
   (options, args) = parser.parse_args()
+  print "args[1] %s" % args[1]
+  args[1] = args[1].replace('../','').replace('..\\','').replace('libraries\\','').replace('node\\','').replace('deps\\','').replace('v8\\','').replace('tools\\','').replace('gyp\\','')
+  print "args[1] %s" % args[1]
   JS2C(args[2:],
        args[0],
        args[1],
diff --git a/src/node.js b/src/node.js
index 34aae93..1a03980 100644
--- a/src/node.js
+++ b/src/node.js
@@ -626,7 +626,14 @@
 
       default:
         // Probably an error on in uv_guess_handle()
-        throw new Error('Implement me. Unknown stream file type!');
+        if(process.platform === 'win32' && (fd === 1 || fd === 2)) {
+          var fs = NativeModule.require('fs');
+          stream = new fs.SyncWriteStream(fd);
+          stream._type = 'fs'
+        } else {
+          // Probably an error on in uv_guess_handle()
+          throw new Error('Implement me. Unknown stdin file type!');
+        }
     }
 
     // For supporting legacy API we put the FD here.
@@ -718,7 +725,14 @@
 
         default:
           // Probably an error on in uv_guess_handle()
-          throw new Error('Implement me. Unknown stdin file type!');
+          if(process.platform === 'win32' && (fd === 1 || fd === 2)) {
+            var fs = NativeModule.require('fs');
+            stream = new fs.SyncWriteStream(fd);
+            stream._type = 'fs'
+          } else {
+            // Probably an error on in uv_guess_handle()
+            throw new Error('Implement me. Unknown stdin file type!');
+          }
       }
 
       // For supporting legacy API we put the FD here.
@@ -727,7 +741,7 @@
       // stdin starts out life in a paused state, but node doesn't
       // know yet.  Explicitly to readStop() it to put it in the
       // not-reading state.
-      if (stdin._handle && stdin._handle.readStop) {
+      if (stdin._handle && stdin._handle.readStop && process.platform != 'win32') {
         stdin._handle.reading = false;
         stdin._readableState.reading = false;
         stdin._handle.readStop();
diff --git a/tools/js2c.py b/tools/js2c.py
index ec9705e..deb428c 100755
--- a/tools/js2c.py
+++ b/tools/js2c.py
@@ -293,6 +293,11 @@ def JS2C(source, target):
     lines = ExpandMacros(lines, macros)
     lines = CompressScript(lines, do_jsmin)
     data = ToCArray(s, lines)
+    if 'node/' in s or 'node\\' in s or 'modules\\' in s or 'modules/' in s:
+      s = s.replace('node/lib/','').replace('node/src/','').replace('node/','').replace('node\\lib\\','').replace('node\\src\\','').replace('node\\','').replace('libraries\\','').replace('libraries/','').replace('../','').replace('../','').replace('..\\','').replace('..\\','')
+
+    if 'modules\\' in s:
+      s = s.split('\\')[len(s.split('\\'))-1]
 
     # On Windows, "./foo.bar" in the .gyp file is passed as "foo.bar"
     # so don't assume there is always a slash in the file path.
@@ -303,6 +308,10 @@ def JS2C(source, target):
 
     if '.' in id:
       id = id.split('.', 1)[0]
+    if '_mac' in s or '_win' in s or '_gtk' in s or 'Bridge' in s or '_base' in s or 'AppSchema' in s or 'Application' in s:
+      id = os.path.basename(str(s)).split('.')[0].replace('_mac','').replace('_win','').replace('_linux','').replace('_posix','').replace('_gtk','')
+
+    print "id is: " % id
 
     if delay: id = id[:-6]
     if delay:
